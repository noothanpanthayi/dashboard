{"version":3,"file":"static/js/315.214b37b3.chunk.js","mappings":"gJAEO,MAAMA,EAAQA,KAejB,MAAOC,EAAOC,IAAUC,EAAAA,EAAAA,UAAmB,CACvCC,cAAc,GACdC,WAAU,IAsBd,OALAC,EAAAA,EAAAA,YAAU,KAdIC,WAER,MAAMC,QAAaC,MAAM,yCACnBL,QAAoBI,EAAOE,OAEjCR,GAASS,IACA,IACAA,EACHP,mBAEJ,EAKJQ,EAAS,GACX,IAGK,CAACC,KAAKZ,EAAMG,cAAc,E,aCNrC,MAAMU,EAAWC,IACmB,IADlB,UAACC,EAAS,WAAEC,EAAU,QAAEC,EAAO,eAAEC,EAAc,YAAEC,EAAW,QAC5EC,EAAO,UAAEC,GAAqBP,EAC9B,OAAOQ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACPC,EAAAA,EAAAA,KAAA,MAAAD,SAAKL,OACLM,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAIV,EAAWC,EAAQ,GAAGO,SAAC,eAC5CC,EAAAA,EAAAA,KAAA,UAAQC,QAASR,EAAeM,SAAC,qBACjCC,EAAAA,EAAAA,KAAA,SAAOE,KAAK,OAAOC,SAAUP,IAE3BN,EAAUc,KAAIC,IAAgB,IAAf,GAACC,EAAE,MAAEC,GAAMF,EACxB,OAAOL,EAAAA,EAAAA,KAACQ,EAAAA,SAAc,CAAAT,UACpBC,EAAAA,EAAAA,KAAA,OAAAD,SAAMQ,KADoBD,EAEX,MAGlB,EAQCG,EAAcC,IAAkC,IAAjC,SAACX,GAA4BW,EAC9C,OAAOV,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACHC,EAAAA,EAAAA,KAAA,MAAIW,MAAO,CAACC,MAAM,OAAOb,SAAEA,KAC5B,EA6DP,EA1DYc,KACV,MAAM,KAAC1B,GAAMb,KAEPkB,EAASD,IAAYd,EAAAA,EAAAA,UAAiB,IACtCqC,EAAMC,IAAStC,EAAAA,EAAAA,UAAiB,IAsBjCuC,GAAUC,EAAAA,EAAAA,QAAyB,MAmBxC,OAAOpB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACLC,EAAAA,EAAAA,KAAA,OAAKW,MAAO,CAACO,UAAU,KAAKnB,SAAC,SAC7BC,EAAAA,EAAAA,KAAA,SAAOE,KAAK,OAAOiB,IAAKH,KACxBnB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,WAASP,MACbQ,EAAAA,EAAAA,KAACZ,EAAU,CAACQ,UA3BEwB,IACfL,EAAQK,EAAEC,OAAOC,MAAM,EA0BYC,QA/BvBA,IACN,CAAC,SAAU,QAAS,WAAW,IA8BgB5B,QAnCzCA,KACN,CAAC6B,IAAI,SAkC4D9B,YAvCvDA,IACV,oBAsC2FD,eA3C9EA,KACpBF,EAAWC,EAAU,GAAG,EA2CtBF,UAAWH,EAAMK,QAASA,EAASD,WAAYA,KAC/CM,EAAAA,EAAAA,MAACY,EAAa,CAAAV,SAAA,EACZC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,eACNC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,mBAEL,C","sources":["pages/TypeScriptReference/getData.ts","pages/TypeScriptReference/AMD.tsx"],"sourcesContent":["import  {useState, useEffect} from 'react';\r\n\r\nexport const HttpGet=()=>{\r\n    \r\n    type Coffee = {\r\n        title: string\r\n        description: string\r\n        ingredients: string[]\r\n        image: string\r\n        id: number\r\n    }\r\n\r\n    interface StateObj {\r\n        coffeeListArr:Coffee[]\r\n        completed:boolean\r\n    }\r\n\r\n    const [state, setState]=useState<StateObj>({\r\n        coffeeListArr:[],\r\n        completed:false\r\n    })\r\n\r\n    const getData=async()=>{\r\n\r\n          const header=await fetch(\"https://api.sampleapis.com/coffee/hot\");\r\n          const coffeeListArr=await header.json();\r\n\r\n          setState(prevState=>{\r\n            return {\r\n                ...prevState,\r\n                coffeeListArr\r\n            }\r\n          })\r\n    }\r\n   \r\n  \r\n    useEffect(()=>{\r\n        getData();\r\n    },[]);\r\n     \r\n\r\n    return {data:state.coffeeListArr}\r\n\r\n}","import React, { FC, ReactNode, useRef, useState } from 'react';\r\nimport { HttpGet } from './getData';\r\n\r\n\r\n//  type Root = Root2[]\r\n\r\n type Coffee = {\r\n    title: string;\r\n    description: string;\r\n    ingredients: string[];\r\n    image: string;\r\n    id: number;\r\n}\r\n\r\ntype Msg={\r\n  msg:string;\r\n}\r\n\r\ntype CoffeeEvent=React.ChangeEvent<HTMLInputElement>\r\ntype CoffeeCounter=React.Dispatch<React.SetStateAction<number>>\r\n\r\ninterface ChildProps {\r\n  propsData:Coffee[];\r\n  setCounter:CoffeeCounter;\r\n  counter:number;\r\n  incrementByTen:() => void;\r\n  sendMessage:()=>string;\r\n  sendObj:()=>Msg;\r\n  sendArr:()=>Array<string|number>;\r\n  updateTxt:(e:CoffeeEvent)=>void;\r\n}\r\n\r\n// const CoffeeView=({propsData}:{propsData:[]})=>{ \r\n// const CoffeeView=({propsData}:{propsData:Coffee[]})=>{ \r\n\r\nconst CoffeeView=({propsData, setCounter, counter, incrementByTen, sendMessage, \r\n  sendObj, updateTxt}:ChildProps)=>{\r\n  return <>\r\n  <h1>{sendMessage()}</h1>\r\n  <button onClick={()=>setCounter(counter+1)}>Increment</button>\r\n  <button onClick={incrementByTen}>Increment by 10</button>\r\n  <input type=\"text\" onChange={updateTxt}/>\r\n  {\r\n    propsData.map(({id, title})=>{\r\n      return <React.Fragment key={id}>\r\n        <div>{title}</div>\r\n      </React.Fragment>\r\n    })\r\n  }\r\n  </>\r\n\r\n}\r\n\r\ntype SystemMessageProps={\r\n  children:ReactNode\r\n}\r\n\r\nconst SystemMessage=({children}:SystemMessageProps)=>{\r\n    return <>\r\n        <h1 style={{color:'red'}}>{children}</h1>\r\n    </>\r\n}\r\n\r\nconst AMD = () => {\r\n  const {data}=HttpGet();\r\n\r\n const [counter, setCounter]=useState<number>(0);\r\n const [text, setText]=useState<string>('');\r\n\r\n const incrementByTen=()=>{\r\n  setCounter(counter + 10)\r\n }\r\n\r\n const sendMessage=()=>{\r\n  return \"This is a message\"\r\n }\r\n\r\n const sendObj=()=>{\r\n  return {msg:'text'}\r\n }\r\n\r\n const sendArr=()=>{\r\n  return ['Jerald', 'Nizar', 'Musthafa',12]\r\n }\r\n\r\n const updateTxt=(e:React.ChangeEvent<HTMLInputElement>)=>{\r\n   setText(e.target.value)\r\n }\r\n\r\n const inputText=useRef<HTMLInputElement>(null);\r\n\r\n const links=[\r\n  'https://www.google.com',\r\n  'https://www.microsoft.com'\r\n ] as const; //becomes specific and readOnly\r\n\r\n\r\nlet amount:number=100;\r\nlet name:string=\"John\";\r\nlet veggie:boolean=false;\r\nlet usersList:string[]=['John','Jaffer','Hari'];\r\nlet usersAmount:number[]=[100,200,300];\r\n\r\nlet usersListNew:Array<string>=['John','Jaffer','Hari'];\r\nlet usersAmountNew:Array<number>=[100,200,300];\r\n\r\n\r\n\r\n  return <>\r\n    <div style={{marginTop:145}}>AMD</div>\r\n    <input type=\"text\" ref={inputText}/>\r\n    <h1>Counter:{counter}</h1>\r\n    <CoffeeView updateTxt={updateTxt} sendArr={sendArr} sendObj={sendObj} sendMessage={sendMessage} incrementByTen={incrementByTen} \r\n    propsData={data} counter={counter} setCounter={setCounter}/>\r\n    <SystemMessage>\r\n      <span>Message 1</span>\r\n      <span>Message 2</span>\r\n    </SystemMessage>\r\n    </>\r\n}\r\n\r\nexport default AMD"],"names":["HttpGet","state","setState","useState","coffeeListArr","completed","useEffect","async","header","fetch","json","prevState","getData","data","CoffeeView","_ref","propsData","setCounter","counter","incrementByTen","sendMessage","sendObj","updateTxt","_jsxs","_Fragment","children","_jsx","onClick","type","onChange","map","_ref2","id","title","React","SystemMessage","_ref3","style","color","AMD","text","setText","inputText","useRef","marginTop","ref","e","target","value","sendArr","msg"],"sourceRoot":""}