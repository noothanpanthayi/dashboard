{"version":3,"file":"static/js/418.620116fe.chunk.js","mappings":"iJAGA,MAAMA,EAAEC,QAAQC,I,aCAhB,MA2BA,EA3BmBC,KAAO,IAADC,EAAAC,EAAAC,EAEvB,MAAM,YAACC,EAAW,YAAEC,EAAW,SAAEC,EAAQ,SAAEC,EAAQ,UAAEC,GD8E1BC,KAE7B,MAAOC,EAAOC,IAAUC,EAAAA,EAAAA,UAAS,CAC7BP,YAAY,CAAC,EACbE,SAAS,CAAC,EACVM,aAAa,CAAC,EACdL,UAAU,GACVM,SAAQ,EACRC,MAAM,EACNX,YAAY,IAGVY,EAAQC,UACV,GAAIP,EAAMN,YAAYM,EAAMF,UAAUU,YAIjC,CACD,MAAMC,QAAaC,MAAMX,GAEnBJ,SADWc,EAAOE,QACIC,QAAQ,GAE9BC,EAAc,IAAIb,GACxBa,EAAUf,UAAU,IAAIe,EAAUf,UAAWH,GAC7CkB,EAAUV,aAAaU,EAAUf,UAAUe,EAAUf,UAAY,GACjEe,EAAUnB,cAEVO,GAASa,IACE,IACAA,EACHV,SAAQ,EACRT,cACAG,UAAUe,EAAUf,UACpBJ,YAAYmB,EAAUnB,eAGlC,GAgCJ,OATAqB,EAAAA,EAAAA,YAAU,KACNT,GAAS,GACX,KAEFS,EAAAA,EAAAA,YAAU,KACN5B,EAAE,SAASa,EAAM,IAId,CAACL,YAAYK,EAAML,YAAaE,SA5BxBA,KACX,MAAMgB,EAAU,IAAIb,GAChBA,EAAMN,YAAYM,EAAMF,UAAUU,OAClCK,EAAUnB,cAGVY,GACJ,EAqB4CV,SAlBjCA,KACXK,GAASa,IACE,IACAA,EACHpB,cAAcoB,EAAUpB,eAE9B,EAYoDI,UAAUE,EAAMF,UAAWK,aAAaH,EAAMG,aACpGT,YAAYM,EAAMN,YAAY,ECnJ8GsB,CAAe,6BAE/J,IAAIC,EAKF,OAJGvB,GAAa,IACbuB,EAASnB,EAAUJ,EAAY,KAG3BwB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACLF,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAACC,OAAO,kBAAmBC,UAAU,IAAIH,SAAA,EACtDF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,iBAAuB,QAAT7B,EAAC0B,SAAQ,IAAA1B,GAAM,QAANC,EAARD,EAAUiC,YAAI,IAAAhC,OAAN,EAARA,EAAgBiC,UAElCP,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,gBAAyB,OAAXzB,QAAW,IAAXA,GAAiB,QAANF,EAAXE,EAAa6B,YAAI,IAAA/B,OAAN,EAAXA,EAAmBgC,SAE9B3B,EAAUU,OAAO,GAAKV,EAAU4B,KAAIC,IACzBC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAT,UACbQ,EAAAA,EAAAA,KAAA,OAAAR,SAAMO,EAAIH,KAAKC,SADIE,EAAIG,GAAGN,YAMxCI,EAAAA,EAAAA,KAAA,UAAQG,QAASnC,EAASwB,SAAC,eAC3BQ,EAAAA,EAAAA,KAAA,UAAQG,QAASlC,EAASuB,SAAC,gBACxB,C","sources":["pages/randomuser/useRandomfetch.ts","pages/randomuser/RandomUser.tsx"],"sourcesContent":["\r\nimport {useState, useEffect} from 'react';\r\n\r\nconst p=console.log;\r\n\r\nexport interface User {\r\n    gender: string\r\n    name: Name\r\n    location: Location  \r\n    email: string\r\n    login: Login\r\n    dob: Dob\r\n    registered: Registered\r\n    phone: string\r\n    cell: string\r\n    id: Id\r\n    picture: Picture\r\n    nat: string\r\n  }\r\n  \r\n  export interface Name {\r\n    title: string\r\n    first: string\r\n    last: string\r\n  }\r\n  \r\n  export interface Location {\r\n    street: Street\r\n    city: string\r\n    state: string\r\n    country: string\r\n    postcode: string\r\n    coordinates: Coordinates\r\n    timezone: Timezone\r\n  }\r\n  \r\n  export interface Street {\r\n    number: number\r\n    name: string \r\n  }\r\n  \r\n  export interface Coordinates {\r\n    latitude: string\r\n    longitude: string\r\n  }\r\n  \r\n  export interface Timezone {\r\n    offset: string\r\n    description: string\r\n  }\r\n  \r\n  export interface Login {\r\n    uuid: string\r\n    username: string\r\n    password: string\r\n    salt: string\r\n    md5: string\r\n    sha1: string\r\n    sha256: string\r\n  }\r\n  \r\n  export interface Dob {\r\n    date: string\r\n    age: number\r\n  }\r\n  \r\n  export interface Registered {\r\n    date: string\r\n    age: number\r\n  }\r\n  \r\n  export interface Id {\r\n    name: string\r\n    value: string\r\n  }\r\n  \r\n  export interface Picture {\r\n    large: string\r\n    medium: string\r\n    thumbnail: string\r\n  }\r\n  \r\n\r\nexport const useRandomfetch=(url:string)=>{\r\n\r\nconst [state, setState]=useState({\r\n    currentUser:{},\r\n    nextUser:{},\r\n    previousUser:{},\r\n    usersList:[],\r\n    loading:true,\r\n    count:0,\r\n    activeIndex:0\r\n});\r\n\r\nconst doFetch=async()=>{\r\n    if (state.activeIndex<state.usersList.length){\r\n\r\n\r\n    }\r\n    else {\r\n        const header=await fetch(url);\r\n        const data=await header.json();\r\n        const currentUser:User=data.results[0];\r\n    \r\n        const tempState:any={...state}\r\n        tempState.usersList=[...tempState.usersList, currentUser];\r\n        tempState.previousUser=tempState.usersList[tempState.usersList - 1];\r\n        tempState.activeIndex++\r\n    \r\n        setState(prevState=>{\r\n            return {\r\n                ...prevState,\r\n                loading:false,\r\n                currentUser,\r\n                usersList:tempState.usersList,\r\n                activeIndex:tempState.activeIndex\r\n            }\r\n        })\r\n    }\r\n   \r\n}\r\n\r\nconst nextUser=()=>{\r\n    const tempState={...state};\r\n    if (state.activeIndex<state.usersList.length){\r\n        tempState.activeIndex++;\r\n    }\r\n    else {\r\n        doFetch();\r\n    }\r\n}\r\n\r\nconst prevUser=()=>{\r\n    setState(prevState=>{\r\n        return {\r\n            ...prevState,\r\n            activeIndex:--prevState.activeIndex\r\n        }\r\n    })\r\n}\r\n\r\nuseEffect(()=>{\r\n    doFetch();\r\n},[]);\r\n\r\nuseEffect(()=>{\r\n    p(\"State \",state);\r\n})\r\n\r\n\r\nreturn {currentUser:state.currentUser, nextUser,prevUser, usersList:state.usersList, previousUser:state.previousUser,\r\n    activeIndex:state.activeIndex}\r\n\r\n\r\n\r\n\r\n}","import React, { Fragment } from 'react'\r\nimport { User, useRandomfetch } from './useRandomfetch';\r\n\r\nconst RandomUser = () => {\r\n\r\n  const {activeIndex, currentUser, prevUser, nextUser, usersList}:{currentUser:any,prevUser:any,nextUser:any,usersList:User[],activeIndex:any}= useRandomfetch(\"https://randomuser.me/api\");\r\n\r\nlet prevName:any;\r\n if (activeIndex>=2){\r\n     prevName=usersList[activeIndex-2];\r\n }\r\n\r\n  return <>\r\n    <div style={{border:'solid 3px green', marginTop:50}}>\r\n   <h1>Previous User:{prevName?.name?.first}</h1>\r\n\r\n    <h1>Current User:{currentUser?.name?.first}</h1>\r\n        {\r\n           usersList.length>0 && usersList.map(row=>{\r\n               return <Fragment key={row.id.name}>\r\n                  <div>{row.name.first}</div>\r\n                </Fragment>\r\n            })\r\n        }\r\n    </div>\r\n    <button onClick={prevUser}>Prev User</button>\r\n    <button onClick={nextUser}>Next User</button>\r\n    </>\r\n}\r\n\r\nexport default RandomUser;"],"names":["p","console","log","RandomUser","_prevName","_prevName$name","_currentUser$name","activeIndex","currentUser","prevUser","nextUser","usersList","url","state","setState","useState","previousUser","loading","count","doFetch","async","length","header","fetch","json","results","tempState","prevState","useEffect","useRandomfetch","prevName","_jsxs","_Fragment","children","style","border","marginTop","name","first","map","row","_jsx","Fragment","id","onClick"],"sourceRoot":""}