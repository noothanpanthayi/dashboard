{"version":3,"file":"static/js/562.3144b64a.chunk.js","mappings":"8JAGA,MAwJM,KAAEA,EAAI,OAAEC,GC1Jd,CAAgB,KAAO,uBAAuB,OAAS,0BD2JvD,EAzJiBC,KAAO,IAADC,EACrB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,CACjCC,YAAY,EACZC,KAAM,CACJ,CACEC,GAAI,OACJC,KAAM,SACNC,MAAO,QACPC,KAAM,OACNC,WAAW,EACXC,aAAa,GAEf,CACEL,GAAI,OACJC,KAAM,QACNC,MAAO,OACPC,KAAM,OACNC,WAAW,EACXC,aAAa,GAEf,CACEL,GAAI,OACJC,KAAM,OACNC,MAAO,SACPC,KAAM,OACNC,WAAW,EACXC,aAAa,MAuCbC,EAAYC,IAChB,MACMR,EADY,IAAKJ,GACAI,KAIjBM,EAAcN,EAAKS,MAAMC,GACtBA,EAAIT,KAAOO,EAAEG,OAAOV,KAGzBK,IACFA,EAAYD,YAAwB,OAAXC,QAAW,IAAXA,GAAAA,EAAaD,YAGxCR,GAAUe,IACD,IACFA,EAEHZ,UAEF,EAIJ,OACEa,EAAAA,EAAAA,MAAA,OAAKC,UAAY,GAAEtB,OAAiBuB,SAAA,EAClCC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,SACEf,GAAG,YACHgB,QAASrB,EAAMG,WACfmB,SAxDWV,IACjB,MAAMW,EAAY,IAAKvB,GACvBuB,EAAUpB,YAAcoB,EAAUpB,WAClC,MAAMC,EAAOmB,EAAUnB,KACvB,IAAIoB,GAAW,EACXC,GAA2C,IAArBzB,EAAMG,WAG9BqB,GADEC,EAMJrB,EAAKsB,SAASZ,IACZA,EAAIL,UAAYe,CAAQ,IAG1BvB,GAAUe,IACD,IACFA,EACHb,WAAYoB,EAAUpB,WACtBC,UAEF,EAkCIuB,KAAK,gBAGTP,EAAAA,EAAAA,KAAA,OAAAD,SAAK,QACLC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,UACLC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,WACLC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,SACM,QADIpB,EACdC,EAAMI,YAAI,IAAAL,OAAA,EAAVA,EAAY6B,KACX,CAAAC,EAAoDC,KAAW,IAA9D,GAAEzB,EAAE,KAAEC,EAAI,MAAEC,EAAK,KAAEC,EAAI,UAAEC,EAAS,YAAEC,GAAamB,EAChD,OACEZ,EAAAA,EAAAA,MAACc,EAAAA,SAAQ,CAAAZ,SAAA,EACPC,EAAAA,EAAAA,KAAA,OAAQY,QAASrB,EAAUO,UAAWT,EAAYZ,EAAS,GAAGsB,UAC5DC,EAAAA,EAAAA,KAAA,SACEf,GAAIA,EACJ,aAAYyB,EACZR,SAAUX,EACVgB,KAAK,WACLN,QAASZ,OAGbW,EAAAA,EAAAA,KAAA,OACEf,GAAIA,EACJ2B,QAASrB,EACTO,UAAWT,EAAYZ,EAAS,GAAGsB,SAElCd,KAEHe,EAAAA,EAAAA,KAAA,OACEf,GAAIA,EACJ2B,QAASrB,EACTO,UAAWT,EAAYZ,EAAS,GAAGsB,SAElCb,KAEHc,EAAAA,EAAAA,KAAA,OACEf,GAAIA,EACJ2B,QAASrB,EACTO,UAAWT,EAAYZ,EAAS,GAAGsB,SAElCZ,KAEHa,EAAAA,EAAAA,KAAA,OACEf,GAAIA,EACJ2B,QAASrB,EACTO,UAAWT,EAAYZ,EAAS,GAAGsB,SAElCX,MApCUH,EAsCJ,MAIb,C","sources":["pages/checkAll/CheckAll.tsx","webpack://portfolio/./src/pages/checkAll/checkall.module.css?2857"],"sourcesContent":["import React, { useState, useEffect, Fragment } from 'react'\r\nimport styles from './checkall.module.css'\r\n\r\nconst CheckAll = () => {\r\n  const [state, setState] = useState({\r\n    allChecked: false,\r\n    auto: [\r\n      {\r\n        id: '1001',\r\n        make: 'Toyota',\r\n        model: 'Camry',\r\n        year: '2023',\r\n        cbchecked: false,\r\n        selectedRow: false,\r\n      },\r\n      {\r\n        id: '1002',\r\n        make: 'Honda',\r\n        model: 'City',\r\n        year: '2024',\r\n        cbchecked: false,\r\n        selectedRow: false,\r\n      },\r\n      {\r\n        id: '1003',\r\n        make: 'Ford',\r\n        model: 'Fusion',\r\n        year: '2025',\r\n        cbchecked: false,\r\n        selectedRow: false,\r\n      },\r\n    ],\r\n  })\r\n\r\n  type autoType = {\r\n    id: string\r\n    make: string\r\n    model: string\r\n    year: string\r\n    cbchecked: boolean\r\n  }\r\n\r\n  const selectAll = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const tempState = { ...state }\r\n    tempState.allChecked = !tempState.allChecked\r\n    const auto = tempState.auto\r\n    let allCheck = false\r\n    let checkedVal: boolean = state.allChecked === true ? true : false\r\n\r\n    if (checkedVal) {\r\n      allCheck = false\r\n    } else {\r\n      allCheck = true\r\n    }\r\n\r\n    auto.forEach((row) => {\r\n      row.cbchecked = allCheck\r\n    })\r\n\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        allChecked: tempState.allChecked,\r\n        auto,\r\n      }\r\n    })\r\n  }\r\n\r\n  const rowCheck = (e: React.ChangeEvent<HTMLInputElement> | any) => {\r\n    const tempState = { ...state }\r\n    const auto = tempState.auto\r\n    // const selectedRowIndex = e.currentTarget.getAttribute('data-index');\r\n    // if (selectedRowIndex) tempState.selectedRow = selectedRowIndex\r\n\r\n    const selectedRow = auto.find((row) => {\r\n      return row.id === e.target.id\r\n    })\r\n\r\n    if (selectedRow) {\r\n      selectedRow.cbchecked = !selectedRow?.cbchecked\r\n    }\r\n\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        // selectedRow: tempState.selectedRow,\r\n        auto,\r\n      }\r\n    })\r\n  }\r\n  let totCol = 11\r\n\r\n  return (\r\n    <div className={`${grid} ${totCol}`}>\r\n      <div>\r\n        <input\r\n          id=\"selectAll\"\r\n          checked={state.allChecked}\r\n          onChange={selectAll}\r\n          type=\"checkbox\"\r\n        />\r\n      </div>\r\n      <div>Id</div>\r\n      <div>Make</div>\r\n      <div>Model</div>\r\n      <div>Year</div>\r\n      {state.auto?.map(\r\n        ({ id, make, model, year, cbchecked, selectedRow }, index) => {\r\n          return (\r\n            <Fragment key={id}>\r\n              <div    onClick={rowCheck} className={cbchecked ? selRow : ''}>\r\n                <input\r\n                  id={id}\r\n                  data-index={index}\r\n                  onChange={rowCheck}\r\n                  type=\"checkbox\"\r\n                  checked={cbchecked}\r\n                />\r\n              </div>\r\n              <div\r\n                id={id}\r\n                onClick={rowCheck}\r\n                className={cbchecked ? selRow : ''}\r\n              >\r\n                {id}\r\n              </div>\r\n              <div\r\n                id={id}\r\n                onClick={rowCheck}\r\n                className={cbchecked ? selRow : ''}\r\n              >\r\n                {make}\r\n              </div>\r\n              <div\r\n                id={id}\r\n                onClick={rowCheck}\r\n                className={cbchecked ? selRow : ''}\r\n              >\r\n                {model}\r\n              </div>\r\n              <div\r\n                id={id}\r\n                onClick={rowCheck}\r\n                className={cbchecked ? selRow : ''}\r\n              >\r\n                {year}\r\n              </div>\r\n            </Fragment>\r\n          )\r\n        },\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst { grid, selRow } = styles\r\nexport default CheckAll\r\n","// extracted by mini-css-extract-plugin\nexport default {\"grid\":\"checkall_grid__1sJ8q\",\"selRow\":\"checkall_selRow__MOeRU\"};"],"names":["grid","selRow","CheckAll","_state$auto","state","setState","useState","allChecked","auto","id","make","model","year","cbchecked","selectedRow","rowCheck","e","find","row","target","prevState","_jsxs","className","children","_jsx","checked","onChange","tempState","allCheck","checkedVal","forEach","type","map","_ref","index","Fragment","onClick"],"sourceRoot":""}