

  const {cartlist}:any=useSelector<any>(state=>state.cartlist);

   interface Iproduct {
    id:string,
    title:string,
    description:string,
    price:number
  }
  const { cartlist }:NonNullable<any>= useSelector((state:Iproduct|any) => state?.cartlist)

  
  const getUserInputTxt = (e: React.ChangeEvent<HTMLInputElement>) => {

  
  const deleteItem = (e:Event & {target:HTMLButtonElement})=> {
    dispatch(removeItem(e.target.id))
  }

    const total = cartlist.reduce((accum:number, row:Iproduct) => {}

const {data,isLoading, error} =useGetProductsQuery(null); //argument need to be passed


//Reference
/*
type SCReturns={
state:{total:number},
dispatch:React.Dispatch<any>,
cartlist:NonNullable<ICartList | any>,
deleteItem:React.MouseEvent<HTMLDivElement>
}
*/
  

//Reference
// type WorldError={
//     errorObj:{
//         error:boolean
//         errorMsg:string
//     }
//   }

// type WorldLoading={
// loading:boolean
// }
//   const OnError = ({ errorObj }:WorldError) => {
//     return errorObj.error && <h2>Error {errorObj.errorMsg}</h2>
//   }

//   const OnLoading = ({ loading }:WorldLoading) => {
//     return loading && <h2>Loading...</h2>
//   }